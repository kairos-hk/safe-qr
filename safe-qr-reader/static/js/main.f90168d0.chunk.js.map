{"version":3,"sources":["App.js","index.js"],"names":["App","useState","selected","setSelected","startScan","setStartScan","loadingScan","setLoadingScan","isMalicious","setIsMalicious","handleScan","scanData","console","log","url","encodeURIComponent","fetch","response","json","result","error","className","onClick","onChange","e","target","value","facingMode","delay","onError","err","onScan","style","width","rootElement","document","getElementById","ReactDOM","render"],"mappings":"sOA0EeA,EAtEH,WACV,MAAgCC,mBAAS,eAAc,mBAAhDC,EAAQ,KAAEC,EAAW,KAC5B,EAAkCF,oBAAS,GAAM,mBAA1CG,EAAS,KAAEC,EAAY,KAC9B,EAAsCJ,oBAAS,GAAM,mBAA9CK,EAAW,KAAEC,EAAc,KAClC,EAAsCN,oBAAS,GAAM,mBAA9CO,EAAW,KAAEC,EAAc,KAE5BC,EAAU,iDAAG,WAAOC,GAAQ,2FAC5BA,EAAS,CAAD,gBAI4E,OAHtFJ,GAAe,GACfK,QAAQC,IAAI,gBAAiBF,GAEvBG,EAAG,qDAAiDC,mBAAmBJ,IAAS,kBAG7DK,MAAMF,GAAK,KAAD,EAAnB,OAARG,EAAQ,iBACWA,EAASC,OAAO,KAAD,YAEzB,KAFPC,EAAM,EAANA,QAGNV,GAAe,GACK,IAAXU,GACTV,GAAe,GAChB,kDAEDG,QAAQQ,MAAM,sBAAsB,EAAD,IAAO,QAGtB,OAHsB,UAE1Cb,GAAe,GACfF,GAAa,GAAO,6EAGzB,gBAvBe,sCA6BhB,OACE,sBAAKgB,UAAU,MAAK,UAClB,gEAAc,uBAAS,qBACvB,uBACA,wBAAQC,QAAS,kBAAMjB,GAAcD,EAAU,EAAC,SAC7CA,EAAY,YAAc,eAG5BA,GACC,qCACE,yBAAQmB,SAAU,SAACC,GAAC,OAAKrB,EAAYqB,EAAEC,OAAOC,MAAM,EAAEL,UAAU,gBAAe,UAC7E,wBAAQK,MAAM,cAAa,yBAC3B,wBAAQA,MAAM,OAAM,6BAEtB,cAAC,IAAQ,CACPC,WAAYzB,EACZ0B,MAAO,IACPC,QArBU,SAACC,GACnBlB,QAAQQ,MAAM,iBAAkBU,EAClC,EAoBUC,OAAQrB,EACRsB,MAAO,CAAEC,MAAO,cAKrB3B,GAAe,2CACfE,GACC,sBAAKa,UAAU,kBAAiB,UAC9B,qBAAKA,UAAU,eAAc,0BAC7B,0EAKV,ECnEMa,EAAcC,SAASC,eAAe,QAC5CC,IAASC,OACP,cAAC,aAAU,UACT,cAAC,EAAG,MAENJ,E","file":"static/js/main.f90168d0.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport \"./styles.css\";\n\nconst App = () => {\n  const [selected, setSelected] = useState(\"environment\");\n  const [startScan, setStartScan] = useState(false);\n  const [loadingScan, setLoadingScan] = useState(false);\n  const [isMalicious, setIsMalicious] = useState(false);\n\n  const handleScan = async (scanData) => {\n    if (scanData) {\n      setLoadingScan(true);\n      console.log(`Scanned data:`, scanData);\n\n      const url = `http://kairoshk.ddns.net:5000/url/ai/?data=${encodeURIComponent(scanData)}`;\n\n      try {\n        const response = await fetch(url);\n        const { result } = await response.json();\n\n        if (result === 0) {\n          setIsMalicious(false);\n        } else if (result === 1) {\n          setIsMalicious(true);\n        }\n      } catch (err) {\n        console.error(\"Error checking URL:\", err);\n      } finally {\n        setLoadingScan(false);\n        setStartScan(false);\n      }\n    }\n  };\n\n  const handleError = (err) => {\n    console.error(\"QR Scan Error:\", err);\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>악성 URL 탐지 <hr></hr> QR Code Reader</h1>\n      <br></br>\n      <button onClick={() => setStartScan(!startScan)}>\n        {startScan ? \"Stop Scan\" : \"Start Scan\"}\n      </button>\n\n      {startScan && (\n        <>\n          <select onChange={(e) => setSelected(e.target.value)} className=\"camera-select\">\n            <option value=\"environment\">Back Camera</option>\n            <option value=\"user\">Front Camera</option>\n          </select>\n          <QrReader\n            facingMode={selected}\n            delay={1000}\n            onError={handleError}\n            onScan={handleScan}\n            style={{ width: \"300px\" }}\n          />\n        </>\n      )}\n\n      {loadingScan && <p>Loading...</p>}\n      {isMalicious && (\n        <div className=\"warning-overlay\">\n          <div className=\"warning-icon\">⚠️</div>\n          <p>악성 URL 탐지됨!</p>\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default App;\n","import { StrictMode } from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(\n  <StrictMode>\n    <App />\n  </StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}